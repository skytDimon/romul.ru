import logging
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from contextlib import asynccontextmanager

from config.settings import get_settings
from app.api import contact_router, products_router, health_router
from app.utils.logging import setup_logging
from app.services.contact_service import ContactService
from app.middleware import IPRestrictionMiddleware


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Romulus et Remus")
    logger.info(f"üìä –†–µ–∂–∏–º: {get_settings().ENVIRONMENT}")
    
    yield
    
    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=get_settings().APP_NAME,
    description=get_settings().APP_DESCRIPTION,
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=get_settings().ALLOWED_HOSTS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –ø–æ IP
app.add_middleware(
    IPRestrictionMiddleware,
    admin_ips=get_settings().ADMIN_IPS,
    restricted_paths=["/docs", "/redoc", "/openapi.json", "/health"]
)

# Trusted Host middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
if get_settings().ENVIRONMENT == "production":
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=get_settings().ALLOWED_HOSTS
    )

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–æ–≤
app.include_router(contact_router)
app.include_router(products_router)
app.include_router(health_router)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory=get_settings().TEMPLATES_DIR)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory=get_settings().STATIC_DIR), name="static")


# Web —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        return templates.TemplateResponse("index.html", {"request": request})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
        raise


@app.get("/acne", response_class=HTMLResponse)
async def acne_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ Acne Studios"""
    try:
        return templates.TemplateResponse("acne.html", {"request": request})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Acne: {str(e)}")
        raise


@app.get("/hphealth", response_class=HTMLResponse)
async def hphealth_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ HP Health"""
    try:
        return templates.TemplateResponse("hphealth.html", {"request": request})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã HP Health: {str(e)}")
        raise


@app.get("/zip", response_class=HTMLResponse)
async def zip_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ Zip Hoodie"""
    try:
        return templates.TemplateResponse("zip.html", {"request": request})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Zip: {str(e)}")
        raise


@app.get("/poizon", response_class=HTMLResponse)
async def poizon_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ Poizon"""
    try:
        return templates.TemplateResponse("poizon.html", {"request": request})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Poizon: {str(e)}")
        raise


# Legacy endpoint –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@app.post("/send-message")
async def send_message_legacy(
    request: Request,
    telegram: str = Form(...),
    message: str = Form(...)
):
    """Legacy endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        contact_service = ContactService()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        from app.utils.security import get_client_ip
        client_ip = get_client_ip(request)
        user_agent = request.headers.get("user-agent")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await contact_service.process_contact_message(
            telegram=telegram,
            message=message,
            ip_address=client_ip,
            user_agent=user_agent
        )
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}


# Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": get_settings().APP_NAME,
        "version": "1.0.0"
    }


if __name__ == "__main__":
    import uvicorn
    settings = get_settings()
    
    uvicorn.run(
        "app.main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.ENVIRONMENT == "development",
        log_level=settings.LOG_LEVEL.lower()
    )
